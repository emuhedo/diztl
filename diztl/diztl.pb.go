// Code generated by protoc-gen-go. DO NOT EDIT.
// source: diztl.proto

package diztl

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Node struct {
	Ip                   string   `protobuf:"bytes,1,opt,name=ip,proto3" json:"ip,omitempty"`
	Id                   string   `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Node) Reset()         { *m = Node{} }
func (m *Node) String() string { return proto.CompactTextString(m) }
func (*Node) ProtoMessage()    {}
func (*Node) Descriptor() ([]byte, []int) {
	return fileDescriptor_fa22f24bd08bc677, []int{0}
}

func (m *Node) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Node.Unmarshal(m, b)
}
func (m *Node) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Node.Marshal(b, m, deterministic)
}
func (m *Node) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Node.Merge(m, src)
}
func (m *Node) XXX_Size() int {
	return xxx_messageInfo_Node.Size(m)
}
func (m *Node) XXX_DiscardUnknown() {
	xxx_messageInfo_Node.DiscardUnknown(m)
}

var xxx_messageInfo_Node proto.InternalMessageInfo

func (m *Node) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

func (m *Node) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type FileMetadata struct {
	Path                 string   `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	Id                   int32    `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	Size                 int64    `protobuf:"varint,3,opt,name=size,proto3" json:"size,omitempty"`
	Chunks               int32    `protobuf:"varint,4,opt,name=chunks,proto3" json:"chunks,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FileMetadata) Reset()         { *m = FileMetadata{} }
func (m *FileMetadata) String() string { return proto.CompactTextString(m) }
func (*FileMetadata) ProtoMessage()    {}
func (*FileMetadata) Descriptor() ([]byte, []int) {
	return fileDescriptor_fa22f24bd08bc677, []int{1}
}

func (m *FileMetadata) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FileMetadata.Unmarshal(m, b)
}
func (m *FileMetadata) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FileMetadata.Marshal(b, m, deterministic)
}
func (m *FileMetadata) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FileMetadata.Merge(m, src)
}
func (m *FileMetadata) XXX_Size() int {
	return xxx_messageInfo_FileMetadata.Size(m)
}
func (m *FileMetadata) XXX_DiscardUnknown() {
	xxx_messageInfo_FileMetadata.DiscardUnknown(m)
}

var xxx_messageInfo_FileMetadata proto.InternalMessageInfo

func (m *FileMetadata) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *FileMetadata) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *FileMetadata) GetSize() int64 {
	if m != nil {
		return m.Size
	}
	return 0
}

func (m *FileMetadata) GetChunks() int32 {
	if m != nil {
		return m.Chunks
	}
	return 0
}

type FileChunk struct {
	Metadata             *FileMetadata `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	Data                 []byte        `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	Chunk                int32         `protobuf:"varint,3,opt,name=chunk,proto3" json:"chunk,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *FileChunk) Reset()         { *m = FileChunk{} }
func (m *FileChunk) String() string { return proto.CompactTextString(m) }
func (*FileChunk) ProtoMessage()    {}
func (*FileChunk) Descriptor() ([]byte, []int) {
	return fileDescriptor_fa22f24bd08bc677, []int{2}
}

func (m *FileChunk) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FileChunk.Unmarshal(m, b)
}
func (m *FileChunk) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FileChunk.Marshal(b, m, deterministic)
}
func (m *FileChunk) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FileChunk.Merge(m, src)
}
func (m *FileChunk) XXX_Size() int {
	return xxx_messageInfo_FileChunk.Size(m)
}
func (m *FileChunk) XXX_DiscardUnknown() {
	xxx_messageInfo_FileChunk.DiscardUnknown(m)
}

var xxx_messageInfo_FileChunk proto.InternalMessageInfo

func (m *FileChunk) GetMetadata() *FileMetadata {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *FileChunk) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *FileChunk) GetChunk() int32 {
	if m != nil {
		return m.Chunk
	}
	return 0
}

type SearchRequest struct {
	Filename             string   `protobuf:"bytes,1,opt,name=filename,proto3" json:"filename,omitempty"`
	Source               *Node    `protobuf:"bytes,2,opt,name=source,proto3" json:"source,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SearchRequest) Reset()         { *m = SearchRequest{} }
func (m *SearchRequest) String() string { return proto.CompactTextString(m) }
func (*SearchRequest) ProtoMessage()    {}
func (*SearchRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_fa22f24bd08bc677, []int{3}
}

func (m *SearchRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SearchRequest.Unmarshal(m, b)
}
func (m *SearchRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SearchRequest.Marshal(b, m, deterministic)
}
func (m *SearchRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SearchRequest.Merge(m, src)
}
func (m *SearchRequest) XXX_Size() int {
	return xxx_messageInfo_SearchRequest.Size(m)
}
func (m *SearchRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SearchRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SearchRequest proto.InternalMessageInfo

func (m *SearchRequest) GetFilename() string {
	if m != nil {
		return m.Filename
	}
	return ""
}

func (m *SearchRequest) GetSource() *Node {
	if m != nil {
		return m.Source
	}
	return nil
}

type SearchResponse struct {
	Files                []*FileMetadata `protobuf:"bytes,1,rep,name=files,proto3" json:"files,omitempty"`
	Node                 *Node           `protobuf:"bytes,2,opt,name=node,proto3" json:"node,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *SearchResponse) Reset()         { *m = SearchResponse{} }
func (m *SearchResponse) String() string { return proto.CompactTextString(m) }
func (*SearchResponse) ProtoMessage()    {}
func (*SearchResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_fa22f24bd08bc677, []int{4}
}

func (m *SearchResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SearchResponse.Unmarshal(m, b)
}
func (m *SearchResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SearchResponse.Marshal(b, m, deterministic)
}
func (m *SearchResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SearchResponse.Merge(m, src)
}
func (m *SearchResponse) XXX_Size() int {
	return xxx_messageInfo_SearchResponse.Size(m)
}
func (m *SearchResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SearchResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SearchResponse proto.InternalMessageInfo

func (m *SearchResponse) GetFiles() []*FileMetadata {
	if m != nil {
		return m.Files
	}
	return nil
}

func (m *SearchResponse) GetNode() *Node {
	if m != nil {
		return m.Node
	}
	return nil
}

type DownloadRequest struct {
	Source               *Node         `protobuf:"bytes,1,opt,name=source,proto3" json:"source,omitempty"`
	Metadata             *FileMetadata `protobuf:"bytes,2,opt,name=metadata,proto3" json:"metadata,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *DownloadRequest) Reset()         { *m = DownloadRequest{} }
func (m *DownloadRequest) String() string { return proto.CompactTextString(m) }
func (*DownloadRequest) ProtoMessage()    {}
func (*DownloadRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_fa22f24bd08bc677, []int{5}
}

func (m *DownloadRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DownloadRequest.Unmarshal(m, b)
}
func (m *DownloadRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DownloadRequest.Marshal(b, m, deterministic)
}
func (m *DownloadRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DownloadRequest.Merge(m, src)
}
func (m *DownloadRequest) XXX_Size() int {
	return xxx_messageInfo_DownloadRequest.Size(m)
}
func (m *DownloadRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DownloadRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DownloadRequest proto.InternalMessageInfo

func (m *DownloadRequest) GetSource() *Node {
	if m != nil {
		return m.Source
	}
	return nil
}

func (m *DownloadRequest) GetMetadata() *FileMetadata {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func init() {
	proto.RegisterType((*Node)(nil), "Node")
	proto.RegisterType((*FileMetadata)(nil), "FileMetadata")
	proto.RegisterType((*FileChunk)(nil), "FileChunk")
	proto.RegisterType((*SearchRequest)(nil), "SearchRequest")
	proto.RegisterType((*SearchResponse)(nil), "SearchResponse")
	proto.RegisterType((*DownloadRequest)(nil), "DownloadRequest")
}

func init() { proto.RegisterFile("diztl.proto", fileDescriptor_fa22f24bd08bc677) }

var fileDescriptor_fa22f24bd08bc677 = []byte{
	// 375 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x52, 0x51, 0xcb, 0xd3, 0x40,
	0x10, 0x6c, 0xd2, 0x24, 0xb4, 0xdb, 0x36, 0x95, 0x45, 0x24, 0x06, 0x84, 0x72, 0x82, 0x54, 0xc5,
	0x50, 0xe2, 0x4f, 0xb0, 0xf8, 0x20, 0x28, 0x72, 0xd5, 0xa7, 0x82, 0x78, 0x26, 0x6b, 0x7b, 0x34,
	0xcd, 0xc5, 0x5c, 0xaa, 0xd0, 0x5f, 0x2f, 0x77, 0x49, 0x6b, 0x5b, 0x3f, 0x3e, 0xf8, 0x9e, 0xb2,
	0x73, 0xb7, 0x3b, 0x33, 0x3b, 0x17, 0x18, 0xe5, 0xf2, 0xd8, 0x14, 0x49, 0x55, 0xab, 0x46, 0xb1,
	0x17, 0xe0, 0x7d, 0x52, 0x39, 0x61, 0x08, 0xae, 0xac, 0x22, 0x67, 0xe6, 0xcc, 0x87, 0xdc, 0x95,
	0x95, 0xc5, 0x79, 0xe4, 0x76, 0x38, 0x67, 0xdf, 0x60, 0xfc, 0x5e, 0x16, 0xf4, 0x91, 0x1a, 0x91,
	0x8b, 0x46, 0x20, 0x82, 0x57, 0x89, 0x66, 0xdb, 0x4d, 0xd8, 0xfa, 0x62, 0xc6, 0x37, 0x33, 0xa6,
	0x47, 0xcb, 0x23, 0x45, 0xfd, 0x99, 0x33, 0xef, 0x73, 0x5b, 0xe3, 0x13, 0x08, 0xb2, 0xed, 0xa1,
	0xdc, 0xe9, 0xc8, 0xb3, 0x7d, 0x1d, 0x62, 0xdf, 0x61, 0x68, 0xf8, 0xdf, 0x19, 0x84, 0x2f, 0x61,
	0xb0, 0xef, 0x84, 0xac, 0xc0, 0x28, 0x9d, 0x24, 0x97, 0xea, 0xfc, 0x7c, 0x6d, 0x34, 0x6c, 0x9b,
	0x51, 0x1d, 0x73, 0x5b, 0xe3, 0x63, 0xf0, 0x2d, 0xab, 0x15, 0xf6, 0x79, 0x0b, 0xd8, 0x07, 0x98,
	0xac, 0x48, 0xd4, 0xd9, 0x96, 0xd3, 0xaf, 0x03, 0xe9, 0x06, 0x63, 0x18, 0xfc, 0x94, 0x05, 0x95,
	0x62, 0x4f, 0xdd, 0x1a, 0x67, 0x8c, 0xcf, 0x20, 0xd0, 0xea, 0x50, 0x67, 0x64, 0x89, 0x47, 0xa9,
	0x9f, 0x98, 0x94, 0x78, 0x77, 0xc8, 0x3e, 0x43, 0x78, 0xe2, 0xd2, 0x95, 0x2a, 0x35, 0xe1, 0x73,
	0xf0, 0xcd, 0xb0, 0x8e, 0x9c, 0x59, 0xff, 0x7f, 0xbf, 0xed, 0x1d, 0x3e, 0x05, 0xaf, 0x54, 0xf9,
	0x0d, 0xa7, 0x3d, 0x62, 0x6b, 0x98, 0x2e, 0xd5, 0x9f, 0xb2, 0x50, 0x22, 0x3f, 0xf9, 0xfb, 0xe7,
	0xc1, 0xb9, 0xc3, 0xc3, 0x55, 0x48, 0xee, 0xbd, 0x21, 0xa5, 0x1b, 0x18, 0x2f, 0xcd, 0x9b, 0xaf,
	0xa8, 0xfe, 0x2d, 0x33, 0xc2, 0xd7, 0x10, 0xb4, 0xf6, 0x31, 0x4c, 0xae, 0x32, 0x89, 0xa7, 0xc9,
	0xf5, 0x5e, 0xac, 0x87, 0xaf, 0x20, 0xf8, 0x5a, 0x19, 0x5f, 0xf8, 0x28, 0xb9, 0xb1, 0x18, 0x43,
	0x72, 0x7e, 0x34, 0xd6, 0x5b, 0x38, 0xe9, 0x1a, 0xc2, 0x2f, 0xb5, 0xc8, 0x76, 0x54, 0x9f, 0xa4,
	0x62, 0x18, 0x70, 0xda, 0x48, 0xdd, 0x50, 0x8d, 0xed, 0x02, 0x71, 0xfb, 0x61, 0x3d, 0x7c, 0xf3,
	0x00, 0x1b, 0x0b, 0xe7, 0x47, 0x60, 0xff, 0xd8, 0xb7, 0x7f, 0x03, 0x00, 0x00, 0xff, 0xff, 0xa9,
	0x66, 0xfa, 0x52, 0xc0, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// DiztlServiceClient is the client API for DiztlService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DiztlServiceClient interface {
	Search(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*SearchResponse, error)
	Upload(ctx context.Context, in *DownloadRequest, opts ...grpc.CallOption) (DiztlService_UploadClient, error)
}

type diztlServiceClient struct {
	cc *grpc.ClientConn
}

func NewDiztlServiceClient(cc *grpc.ClientConn) DiztlServiceClient {
	return &diztlServiceClient{cc}
}

func (c *diztlServiceClient) Search(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*SearchResponse, error) {
	out := new(SearchResponse)
	err := c.cc.Invoke(ctx, "/DiztlService/Search", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *diztlServiceClient) Upload(ctx context.Context, in *DownloadRequest, opts ...grpc.CallOption) (DiztlService_UploadClient, error) {
	stream, err := c.cc.NewStream(ctx, &_DiztlService_serviceDesc.Streams[0], "/DiztlService/Upload", opts...)
	if err != nil {
		return nil, err
	}
	x := &diztlServiceUploadClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DiztlService_UploadClient interface {
	Recv() (*FileChunk, error)
	grpc.ClientStream
}

type diztlServiceUploadClient struct {
	grpc.ClientStream
}

func (x *diztlServiceUploadClient) Recv() (*FileChunk, error) {
	m := new(FileChunk)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// DiztlServiceServer is the server API for DiztlService service.
type DiztlServiceServer interface {
	Search(context.Context, *SearchRequest) (*SearchResponse, error)
	Upload(*DownloadRequest, DiztlService_UploadServer) error
}

func RegisterDiztlServiceServer(s *grpc.Server, srv DiztlServiceServer) {
	s.RegisterService(&_DiztlService_serviceDesc, srv)
}

func _DiztlService_Search_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiztlServiceServer).Search(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DiztlService/Search",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiztlServiceServer).Search(ctx, req.(*SearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DiztlService_Upload_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DownloadRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DiztlServiceServer).Upload(m, &diztlServiceUploadServer{stream})
}

type DiztlService_UploadServer interface {
	Send(*FileChunk) error
	grpc.ServerStream
}

type diztlServiceUploadServer struct {
	grpc.ServerStream
}

func (x *diztlServiceUploadServer) Send(m *FileChunk) error {
	return x.ServerStream.SendMsg(m)
}

var _DiztlService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "DiztlService",
	HandlerType: (*DiztlServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Search",
			Handler:    _DiztlService_Search_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Upload",
			Handler:       _DiztlService_Upload_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "diztl.proto",
}

// TrackerServiceClient is the client API for TrackerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TrackerServiceClient interface {
	Register(ctx context.Context, in *Node, opts ...grpc.CallOption) (*Node, error)
	Search(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (TrackerService_SearchClient, error)
}

type trackerServiceClient struct {
	cc *grpc.ClientConn
}

func NewTrackerServiceClient(cc *grpc.ClientConn) TrackerServiceClient {
	return &trackerServiceClient{cc}
}

func (c *trackerServiceClient) Register(ctx context.Context, in *Node, opts ...grpc.CallOption) (*Node, error) {
	out := new(Node)
	err := c.cc.Invoke(ctx, "/TrackerService/Register", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trackerServiceClient) Search(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (TrackerService_SearchClient, error) {
	stream, err := c.cc.NewStream(ctx, &_TrackerService_serviceDesc.Streams[0], "/TrackerService/Search", opts...)
	if err != nil {
		return nil, err
	}
	x := &trackerServiceSearchClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TrackerService_SearchClient interface {
	Recv() (*SearchResponse, error)
	grpc.ClientStream
}

type trackerServiceSearchClient struct {
	grpc.ClientStream
}

func (x *trackerServiceSearchClient) Recv() (*SearchResponse, error) {
	m := new(SearchResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TrackerServiceServer is the server API for TrackerService service.
type TrackerServiceServer interface {
	Register(context.Context, *Node) (*Node, error)
	Search(*SearchRequest, TrackerService_SearchServer) error
}

func RegisterTrackerServiceServer(s *grpc.Server, srv TrackerServiceServer) {
	s.RegisterService(&_TrackerService_serviceDesc, srv)
}

func _TrackerService_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Node)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrackerServiceServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/TrackerService/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrackerServiceServer).Register(ctx, req.(*Node))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrackerService_Search_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SearchRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TrackerServiceServer).Search(m, &trackerServiceSearchServer{stream})
}

type TrackerService_SearchServer interface {
	Send(*SearchResponse) error
	grpc.ServerStream
}

type trackerServiceSearchServer struct {
	grpc.ServerStream
}

func (x *trackerServiceSearchServer) Send(m *SearchResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _TrackerService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "TrackerService",
	HandlerType: (*TrackerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Register",
			Handler:    _TrackerService_Register_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Search",
			Handler:       _TrackerService_Search_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "diztl.proto",
}
